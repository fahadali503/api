# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Coordinate {
  accuracy: Float!
  altitude: Float
  altitudeAccuracy: Float
  heading: Float
  latitude: Float!
  longitude: Float!
  speed: Float
}

type Location {
  coords: Coordinate!
  timestamp: Float!
}

type User {
  _id: String!
  fullName: String!
  username: String!
  email: String!
  role: Roles!
  isAccountVerified: Boolean!
  isAccountConfirmed: Boolean!
  isPremiumAccount: Boolean!
  isOnline: Boolean!
  imageId: ImageModel
  profilePicture: String!
  lastSeen: DateTime!
  blocked: Boolean!
  location: Location
  createdAt: String!
  updatedAt: String!
}

enum Roles {
  """Customer Role"""
  CUSTOMER

  """The Seller who will sale products."""
  SELLER

  """The Marketer who will help Seller to sale their products."""
  MARKETER

  """Admin Role"""
  ADMIN

  """The Super Admin will manage all other roles."""
  SUPER_ADMIN
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ImageModel {
  _id: String!
  width: Float!
  height: Float!
  format: String!
  resource_type: String!
  bytes: Float!
  url: String!
  folder: String!
  original_filename: String!
  asset_id: String!
  userId: User!
  createdAt: String!
  updatedAt: String!
}

type Customer {
  _id: String!
  fullName: String!
  username: String!
  email: String!
  role: Roles!
  isAccountVerified: Boolean!
  isAccountConfirmed: Boolean!
  isPremiumAccount: Boolean!
  isOnline: Boolean!
  imageId: ImageModel
  profilePicture: String!
  lastSeen: DateTime!
  blocked: Boolean!
  location: Location
  createdAt: String!
  updatedAt: String!
  favourites: [String!]
}

type BusinessReview {
  _id: String!

  """The User who will review the Business."""
  reviewerId: User!

  """The Business that will get review."""
  businesId: Business!
  review: Float!
  createdAt: String!
  updatedAt: String!
}

type BusinessComment {
  businessId: Business!
  businessOwnerId: User!
  commentorId: User!
  comment: String!
  createdAt: String!
  updatedAt: String!
}

"""Business Schema for Seller"""
type Business {
  _id: String!
  ownerId: User!
  businessName: String!
  businessDescription: String!
  imageId: ImageModel!
  businessImage: String!
  businessEmail: String!
  ownerName: String!
  ownerCNIC: String!
  businessPhone: String!
  location: Location
  experience: String!
  createdAt: String!
  updatedAt: String!
  offDays: [String!]!
  favourites: [User!]!
  likes: [User!]!

  """Reviews of the Business."""
  reviews: [BusinessReview!]!
  comments: [BusinessComment!]!
  closingTime: String!
  openingTime: String!
  isBusinessVerified: Boolean!
  businessVerifiedBy: User!
  businessVerifyTime: String!
  viewers: [RolesUnionType!]!
}

"""
The Roles Union Type is basic interface that will differentiate between who just have queried.
"""
union RolesUnionType = Customer | Seller | Marketer

type Marketer {
  _id: String!
  fullName: String!
  username: String!
  email: String!
  role: Roles!
  isAccountVerified: Boolean!
  isAccountConfirmed: Boolean!
  isPremiumAccount: Boolean!
  isOnline: Boolean!
  imageId: ImageModel
  profilePicture: String!
  lastSeen: DateTime!
  blocked: Boolean!
  location: Location
  createdAt: String!
  updatedAt: String!
  sellers: [Seller!]!
}

type Seller {
  _id: String!
  fullName: String!
  username: String!
  email: String!
  role: Roles!
  isAccountVerified: Boolean!
  isAccountConfirmed: Boolean!
  isPremiumAccount: Boolean!
  isOnline: Boolean!
  imageId: ImageModel
  profilePicture: String!
  lastSeen: DateTime!
  blocked: Boolean!
  location: Location
  createdAt: String!
  updatedAt: String!
  business: Business
  followings: [User!]!
}

type Auth {
  token: String!
  user: User!
}

"""
The return type that will return a message and a business whenever a business will be created.
"""
type CreateBusinessReturnType {
  message: String!
  business: Business!
}

type Query {
  me: MeUnionResult
  login(email: String!, password: String!): Auth!
  getCustomer: Customer!

  """Find Business By ID"""
  findBusiness(businessId: String!): Business
}

"""
When the User will logs in, it will either return seller details or customer details
"""
union MeUnionResult = Customer | Seller

type Mutation {
  signUp(data: SignUpInput!, profilePicture: Upload!): String!
  createBusiness(data: CreateBusinessInput!, businessImage: Upload!): CreateBusinessReturnType!
  editBusiness(businessId: String!, data: EditBusinessInput!): CreateBusinessReturnType!

  """Delete business by id"""
  deleteBusiness(businessId: String!): String!
  uploadSingleImage(image: Upload!): ImageModel!
  uploadMultiple(image: [Upload!]!): [ImageModel!]!
}

input SignUpInput {
  fullName: String!
  username: String!
  email: String!
  password: String!
  role: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"""The Input Type for the Creation of the Business"""
input CreateBusinessInput {
  businessName: String!
  businessDescription: String!
  businessEmail: String!
  ownerName: String!
  ownerCNIC: String!
  businessPhone: String!
  experience: String!
  offDays: [Float!]!
  closingTime: String!
  openingTime: String!
}

input EditBusinessInput {
  businessName: String
  businessDescription: String
  businessEmail: String
  ownerName: String
  ownerCNIC: String
  businessPhone: String
  experience: String
  offDays: String
  closingTime: String
  openingTime: String
}